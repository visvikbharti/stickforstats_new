version: '3.8'

# Production Docker Compose for StickForStats Platform
# Complete stack with frontend, backend, database, cache, and monitoring

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${API_URL:-http://localhost:8000/api}
        REACT_APP_WS_URL: ${WS_URL:-ws://localhost:8000/ws}
        REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-production}
        REACT_APP_VERSION: ${VERSION:-1.0.0}
    image: stickforstats/frontend:${VERSION:-1.0.0}
    container_name: stickforstats-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    environment:
      - RUNTIME_API_URL=${API_URL:-http://localhost:8000/api}
      - RUNTIME_WS_URL=${WS_URL:-ws://localhost:8000/ws}
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-production}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-false}
      - VALIDATION_ENABLED=true
      - AUDIT_ENABLED=true
    depends_on:
      - backend
    networks:
      - stickforstats-network
    volumes:
      - frontend-logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Backend Python API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: stickforstats/backend:${VERSION:-1.0.0}
    container_name: stickforstats-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-stickforstats}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-stickforstats}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - JWT_SECRET=${JWT_SECRET:-change_this_jwt_secret}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-3600}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-10485760}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_PROFILING=${ENABLE_PROFILING:-false}
      - AUDIT_LOG_RETENTION_DAYS=${AUDIT_LOG_RETENTION_DAYS:-2555}
      - FDA_COMPLIANCE_MODE=${FDA_COMPLIANCE_MODE:-true}
    depends_on:
      - postgres
      - redis
    networks:
      - stickforstats-network
    volumes:
      - backend-static:/app/static
      - backend-media:/app/media
      - backend-logs:/app/logs
      - audit-logs:/app/audit_logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stickforstats-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-stickforstats}
      - POSTGRES_USER=${DB_USER:-stickforstats}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - stickforstats-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-backup:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stickforstats}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: stickforstats-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secure_password}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "stickforstats.aof"
      --dbfilename "stickforstats.rdb"
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - stickforstats-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s

  # Celery Worker for Background Tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: stickforstats/backend:${VERSION:-1.0.0}
    container_name: stickforstats-celery
    restart: unless-stopped
    command: celery -A app worker -l ${LOG_LEVEL:-INFO} --concurrency=${WORKER_CONCURRENCY:-4}
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-stickforstats}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-stickforstats}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - postgres
      - redis
    networks:
      - stickforstats-network
    volumes:
      - celery-logs:/app/logs

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: stickforstats/backend:${VERSION:-1.0.0}
    container_name: stickforstats-celery-beat
    restart: unless-stopped
    command: celery -A app beat -l ${LOG_LEVEL:-INFO} --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-stickforstats}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-stickforstats}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
      - celery
    networks:
      - stickforstats-network
    volumes:
      - celerybeat-schedule:/app/celerybeat-schedule

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: stickforstats-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=90d'
    networks:
      - stickforstats-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stickforstats-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_ANALYTICS_REPORTING_ENABLED=false
    depends_on:
      - prometheus
    networks:
      - stickforstats-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: stickforstats-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - stickforstats-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: stickforstats-postgres-backup
    restart: unless-stopped
    environment:
      - PGUSER=${DB_USER:-stickforstats}
      - PGPASSWORD=${DB_PASSWORD:-secure_password}
      - PGHOST=postgres
      - PGDATABASE=${DB_NAME:-stickforstats}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - postgres-backup:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
      echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup.sh' | crontab - &&
      crond -f -l 2
      "
    depends_on:
      - postgres
    networks:
      - stickforstats-network

# Networks
networks:
  stickforstats-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Volumes
volumes:
  # Data volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

  # Application volumes
  backend-static:
    driver: local
  backend-media:
    driver: local
  frontend-logs:
    driver: local
  backend-logs:
    driver: local
  celery-logs:
    driver: local
  nginx-logs:
    driver: local

  # Audit and compliance
  audit-logs:
    driver: local
  postgres-backup:
    driver: local

  # Celery
  celerybeat-schedule:
    driver: local