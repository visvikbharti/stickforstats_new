# Generated by Django 4.2.10 on 2025-09-29 05:28

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0001_analysis_model_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StatisticalAudit",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("analysis_date", models.DateField(auto_now_add=True, db_index=True)),
                ("test_type", models.CharField(db_index=True, max_length=100)),
                (
                    "test_category",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("field", models.CharField(db_index=True, max_length=100)),
                ("subfield", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "sample_size",
                    models.IntegerField(
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("data_dimensions", models.JSONField(blank=True, default=dict)),
                ("data_type", models.CharField(blank=True, max_length=50)),
                ("assumptions_checked", models.IntegerField(default=0)),
                ("assumptions_passed", models.IntegerField(default=0)),
                ("assumptions_failed", models.IntegerField(default=0)),
                ("assumptions_details", models.JSONField(blank=True, default=dict)),
                (
                    "methodology_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "reproducibility_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("violations_detected", models.IntegerField(default=0)),
                ("violation_details", models.JSONField(blank=True, default=list)),
                ("alternatives_recommended", models.IntegerField(default=0)),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("test_statistic", models.CharField(blank=True, max_length=100)),
                ("p_value", models.CharField(blank=True, max_length=100)),
                ("effect_size", models.CharField(blank=True, max_length=100)),
                (
                    "confidence_level",
                    models.DecimalField(decimal_places=4, default=0.95, max_digits=5),
                ),
                ("confidence_interval", models.JSONField(blank=True, default=dict)),
                (
                    "statistical_power",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=5, null=True
                    ),
                ),
                (
                    "minimum_detectable_effect",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "guardian_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("guardian_flags", models.JSONField(blank=True, default=list)),
                (
                    "journal_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("doi", models.CharField(blank=True, max_length=100, null=True)),
                ("publication_year", models.IntegerField(blank=True, null=True)),
                ("user_id", models.CharField(blank=True, max_length=100, null=True)),
                ("source_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("client_type", models.CharField(blank=True, max_length=50)),
                ("computation_time_ms", models.IntegerField(blank=True, null=True)),
                (
                    "memory_usage_mb",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("full_analysis_data", models.JSONField(blank=True, default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("validated", "Validated"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                ("warnings", models.JSONField(blank=True, default=list)),
            ],
            options={
                "verbose_name": "Statistical Audit",
                "verbose_name_plural": "Statistical Audits",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["-timestamp", "field"],
                        name="core_statis_timesta_ea890f_idx",
                    ),
                    models.Index(
                        fields=["test_type", "field"],
                        name="core_statis_test_ty_20927c_idx",
                    ),
                    models.Index(
                        fields=["analysis_date", "status"],
                        name="core_statis_analysi_30d0a6_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditSummary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("period_start", models.DateTimeField(db_index=True)),
                ("period_end", models.DateTimeField(db_index=True)),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("hour", "Hourly"),
                            ("day", "Daily"),
                            ("week", "Weekly"),
                            ("month", "Monthly"),
                            ("quarter", "Quarterly"),
                            ("year", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_analyses", models.IntegerField(default=0)),
                ("total_assumptions_checked", models.IntegerField(default=0)),
                ("total_violations_detected", models.IntegerField(default=0)),
                ("total_alternatives_recommended", models.IntegerField(default=0)),
                (
                    "avg_methodology_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "avg_reproducibility_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "avg_guardian_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("field_breakdown", models.JSONField(blank=True, default=dict)),
                ("test_type_breakdown", models.JSONField(blank=True, default=dict)),
                ("trend_data", models.JSONField(blank=True, default=dict)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-period_end"],
                "indexes": [
                    models.Index(
                        fields=["-period_end", "period_type"],
                        name="core_audits_period__e9ccdb_idx",
                    )
                ],
                "unique_together": {("period_start", "period_end", "period_type")},
            },
        ),
    ]
